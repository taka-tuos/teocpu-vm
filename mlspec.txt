teocpu-vm 仕様書(仮)

§特徴
32bit-RISC(物理アドレス32bit、仮想アドレス32bit)
レジスタ67本(r0-r63,pc,sp,pd)
固定小数演算機能
リトルエンディアン
スタックの有効活用による高速化可能なアーキテクチャ
SIMD命令搭載

§各レジスタの役割
r0-r15  : 汎用レジスタ(固定小数レジスタとして扱う場合 整数部28bit 小数部4bit)
r16-r31 : 汎用レジスタ(固定小数レジスタとして扱う場合 整数部24bit 小数部8bit)
r32-r47 : 汎用レジスタ(固定小数レジスタとして扱う場合 整数部22bit 小数部10bit)
r48-r63 : 汎用レジスタ(固定小数レジスタとして扱う場合 整数部16bit 小数部16bit)
r64(pc) : プログラムカウンタ
r65(sp) : スタックポインタ
r67(pd) : ページディスクリプタ

§ページングフォーマット
r67の値の物理アドレスにある以下の構造体をページ設定とする。
struct {
    u32 p_pagelist;
    u32 pagesize;
    u32 pagelist_len;
};
p_pagelist : 各ページがどの物理アドレスに割り当てられるかのリスト。要素数はpagelist_len個。
pagesize : ページの1Byte単位のサイズ。
pagelist_len : p_pagelistの要素数。
有効な仮想アドレス空間のサイズはpagesize*pagelist_lenで求められる。
ページをまたがって複数バイトアクセスした場合にも1Byteごとに正しく計算されてアクセスされます。

§命令リスト表記凡例
[命令名] [引数(ない場合もあり)]
 [opコード/16進2ケタ] [引数データ/16進2ケタ区切り]
  [処理内容/下の注釈の構文を除き基本的にC99準拠]
[説明]

引数 :
	r   : レジスタ
	imm : 即値(imm16,imm8など特記なき場合32bit)

引数データ :
	rr : レジスタ番号(0-65)
	xx : 即値のうち8bit(並びはリトルエンディアン)

処理内容 :
	D[xx]      : メモリのxx番地(32bitアクセス)
	W[xx]      : メモリのxx番地(16bitアクセス)
	B[xx]      : メモリのxx番地(8bitアクセス)
	r          : 引数(レジスタ)
	imm        : 引数(即値)
	push(xx)   : D[sp] = xx; sp += 4
	pop(xx)    : sp -= 4; xx = D[sp]
	#name      : 一時的に数値を保存する内部変数
	[operator] : 符号なし演算(乗算・除算・大小比較時のみ関係アリ)

§命令リスト(多分そのうち増えます)

NOP
 00
  (no operation)
何もせず素通りする

LR r
 01 rr
  push(r)
スタックにレジスタの値を積む

LI imm
 02 xx xx xx xx
  push(imm)
スタックに即値を積む

SR r
 03 rr
  pop(r)
スタックからとった値をレジスタに入れる

STB
 04
  pop(#offset_addr)
  pop(#base_addr)
  pop(#data)
  B[#base_addr + #offset_addr] = #data & 0xff
スタックに積んである値を上からオフセット・ベースアドレス・データと解釈し
ベースアドレス+オフセット番地にデータを書き込む(8bitアクセス)

STW
 05
  pop(#offset_addr)
  pop(#base_addr)
  pop(#data)
  W[#base_addr + #offset_addr] = #data & 0xffff
スタックに積んである値を上からオフセット・ベースアドレス・データと解釈し
ベースアドレス+オフセット番地にデータを書き込む(16bitアクセス)

STD
 06
  pop(#offset_addr)
  pop(#base_addr)
  pop(#data)
  D[#base_addr + #offset_addr] = #data
スタックに積んである値を上からオフセット・ベースアドレス・データと解釈し
ベースアドレス+オフセット番地にデータを書き込む(32bitアクセス)

LDB
 07
  pop(#offset_addr)
  pop(#base_addr)
  push(B[#base_addr + #offset_addr])
スタックに積んである値を上からオフセット・ベースアドレスと解釈し
ベースアドレス+オフセット番地のデータをスタックに積む(8bitアクセス)

LDW
 08
  pop(#offset_addr)
  pop(#base_addr)
  push(W[#base_addr + #offset_addr])
スタックに積んである値を上からオフセット・ベースアドレスと解釈し
ベースアドレス+オフセット番地のデータをスタックに積む(16bitアクセス)

LDD
 09
  pop(#offset_addr)
  pop(#base_addr)
  push(D[#base_addr + #offset_addr])
スタックに積んである値を上からオフセット・ベースアドレスと解釈し
ベースアドレス+オフセット番地のデータをスタックに積む(32bitアクセス)

ADD
 0A
  pop(#a)
  pop(#b)
  push(#a + #b)
スタックの上から2つ分の値を足してスタックに積む

SUB
 0B
  pop(#a)
  pop(#b)
  push(#a - #b)
スタックの1番上の値から2番目の値を引いてスタックに積む

RSUB
 0V
  pop(#a)
  pop(#b)
  push(#a - #b)
スタックの2番上の値から1番目の値を引いてスタックに積む

MUL
 0D
  pop(#a)
  pop(#b)
  push(#a [*] #b)
スタックの上から2つ分の値をかけてスタックに積む(符号なし)

DIV
 0E
  pop(#a)
  pop(#b)
  push(#a [/] #b)
  push(#a [%] #b)
スタックの1番上の値を2番目の値で割ってスタックに積み、さらに余りを積む(符号なし)

MULI
 0F
  pop(#a)
  pop(#b)
  push(#a * #b)
スタックの上から2つ分の値をかけてスタックに積む(符号あり)

DIVI
 10
  pop(#a)
  pop(#b)
  push(#a / #b)
  push(#a % #b)
スタックの1番上の値を2番目の値で割ってスタックに積み、さらに余りを積む(符号あり)

NEG
 11
  pop(#n)
  push((#n ^ 0xffffffff) + 1)
スタックの1番上の値を符号付き32bit整数と解釈し符号を反転し、それをスタックに積む

ABS
 12
  pop(#n)
  push((#n - (#n >> 31)) ^ (0xffffffff [*] (#n >> 31)))
スタックの1番上の値を符号付き32bit整数と解釈し、その絶対値をスタックに積む

SXB
 13
  pop(#b)
  push((0x1fffffe [*] (#b & 0x80)) | (#b & 0xff))
スタックの1番上の値を8bitから32bitに符号拡張してスタックに積む

SXW
 14
  pop(#w)
  push(0x1fffe [*] (#w & 0x8000) | (#w & 0xffff))
スタックの1番上の値を16bitから32bitに符号拡張してスタックに積む

AND
 15
  pop(#a)
  pop(#b)
  push(#a & #b)
スタックの上から2つ分の値のANDをとり、それをスタックに積む

OR
 16
  pop(#a)
  pop(#b)
  push(#a | #b)
スタックの上から2つ分の値のORをとり、それをスタックに積む

XOR
 17
  pop(#a)
  pop(#b)
  push(#a ^ #b)
スタックの上から2つ分の値のXORをとり、それをスタックに積む

NOT
 18
  pop(#n)
  push(#n ^ 0xffffffff)
スタックの1番上の値の全ビットを反転させ、それをスタックに積む

LLS
 19
  pop(#a)
  pop(#b)
  push(#a << #b)
スタックの上から1番上の値を2番目の値ビット左シフトして、それをスタックに積む

LRS
 1A
  pop(#a)
  pop(#b)
  push(#a >> #b)
スタックの上から1番上の値を2番目の値ビット右シフトして、それをスタックに積む

CMP
 1B
  pop(#a)
  pop(#b)
  push((#a [>] #b ? 0b001 : 0) | (#a [<] #b ? 0b010 : 0) | (#a == #b ? 0b100 : 0))
スタックの上から2つ分の値を比較し、その結果をスタックに積む(符号なし)

CMPI
 1C
  pop(#a)
  pop(#b)
  push((#a > #b ? 0b001 : 0) | (#a < #b ? 0b010 : 0) | (#a == #b ? 0b100 : 0))
スタックの上から2つ分の値を比較し、その結果をスタックに積む(符号あり)

TST
 1D
  pop(#n)
  push((#n [>] 0 ? 0b001 : 0) | (#n == 0 ? 0b100 : 0))
スタックの1番上の値をゼロと比較し、その結果をスタックに積む(符号なし)

TSTI
 1E
  pop(#n)
  push((#n > 0 ? 0b001 : 0) | (#n < 0 ? 0b010 : 0) | (#n == 0 ? 0b100 : 0))
スタックの1番上の値をゼロと比較し、その結果をスタックに積む(符号あり)

CE
 1F
  pop(#c)
  push(#c & 0b100) 
スタックの1番上の値に4をANDし、その結果をスタックに積む(CMP[I]の結果操作用、抽出条件式:==)

CG
 20
  pop(#c)
  push(#c & 0b001)
スタックの1番上の値に1をANDし、その結果をスタックに積む(CMP[I]の結果操作用、抽出条件式:>)

CL
 21
  pop(#c)
  push(#c & 0b010)
スタックの1番上の値に2をANDし、その結果をスタックに積む(CMP[I]の結果操作用、抽出条件式:<)

CEG
 22
  pop(#c)
  push(#c & 0b101)
スタックの1番上の値に5をANDし、その結果をスタックに積む(CMP[I]の結果操作用、抽出条件式:>=)

CEL
 23
  pop(#c)
  push(#c & 0b110)
スタックの1番上の値に6をANDし、その結果をスタックに積む(CMP[I]の結果操作用、抽出条件式:<=)

B
 24
  pop(#a)
  pc = #a
スタックの1番上の値の番地へpcを移動させる

BC
 25
  pop(#a)
  pop(#c)
  if(#c != 0) pc = #a
スタックの2番目の値が0でない場合、スタックの1番上の値の番地へpcを移動させる

C
 26
  pop(#a)
  push(pc + 1)
  pc = #a
スタックの1番上の値の番地へpcを移動させ、移動する前のpcの値+1をスタックに積む

CC
 27
  pop(#a)
  pop(#c)
  push(pc + 1)
  if(#c != 0) pc = #a
スタックの2番目の値が0でない場合、スタックの1番上の値の番地へpcを移動させ、移動する前のpcの値+1をスタックに積む

